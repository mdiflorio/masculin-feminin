{"version":3,"sources":["App.tsx","modules/scraper.tsx","serviceWorker.ts","index.tsx"],"names":["App","state","nounInput","nounType","loading","onSubmit","noun","_this","setState","Promise","resolve","reject","rp","concat","then","html","$","text","catch","err","_this2","this","react_default","a","createElement","className","Input","fluid","icon","placeholder","value","onChange","event","target","Button","color","onClick","Segment","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"kdAkDeA,6MA3CbC,MAAQ,CACNC,UAAW,GACXC,SAAU,GACVC,SAAS,KAGXC,SAAW,WCVN,IAAkBC,EDWrBC,EAAKC,SAAS,CAAEJ,SAAS,KCXJE,EDYJC,EAAKN,MAAMC,UCTvB,IAAIO,QAAQ,SAACC,EAASC,GAC3BC,IAAE,GAAAC,OAHa,mDAGbA,OAAeP,IACdQ,KAAK,SAACC,GACL,IAAMZ,EAAWa,IAAE,qBAAsBD,GAAME,OAC/CP,EAAQP,KAETe,MAAM,SAACC,GACNR,EAAOQ,QDE4BL,KAAK,SAAAX,GAC1CI,EAAKC,SAAS,CAAEL,WAAUC,SAAS,+EAI9B,IAAAgB,EAAAC,KACP,OACEC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACbH,EAAAC,EAAAC,cAAA,oCACAF,EAAAC,EAAAC,cAACE,EAAA,EAAD,CACEC,OAAK,EACLC,KAAK,SACLC,YAAY,YACZC,MAAOT,KAAKpB,MAAMC,UAClBE,QAASiB,KAAKpB,MAAMG,QACpB2B,SAAU,SAAAC,GACRZ,EAAKZ,SAAS,CAAEN,UAAW8B,EAAMC,OAAOH,WAG5CR,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAACU,EAAA,EAAD,CAAQP,OAAK,EAACQ,MAAM,OAAOC,QAASf,KAAKhB,UAAzC,UAGyB,KAAxBgB,KAAKpB,MAAME,UACVmB,EAAAC,EAAAC,cAACa,EAAA,EAAD,KACEf,EAAAC,EAAAC,cAAA,UAAKH,KAAKpB,MAAME,oBAnCZmC,aEKEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OAAOvB,EAAAC,EAAAC,cAACsB,EAAD,MAASC,SAASC,eAAe,SD+G3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMrC,KAAK,SAAAsC,GACjCA,EAAaC","file":"static/js/main.328f6257.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport { Segment, Input, Button } from \"semantic-ui-react\";\nimport \"./App.css\";\n\nimport * as scraper from \"./modules/scraper\";\n\nclass App extends Component {\n  state = {\n    nounInput: \"\",\n    nounType: \"\",\n    loading: false\n  };\n\n  onSubmit = () => {\n    this.setState({ loading: true });\n    scraper.nounInfo(this.state.nounInput).then(nounType => {\n      this.setState({ nounType, loading: false });\n    });\n  };\n\n  render() {\n    return (\n      <div className=\"App\">\n        <div className=\"container\">\n          <h2>Masculin ou FÃ©minin</h2>\n          <Input\n            fluid\n            icon=\"search\"\n            placeholder=\"Search...\"\n            value={this.state.nounInput}\n            loading={this.state.loading}\n            onChange={event => {\n              this.setState({ nounInput: event.target.value });\n            }}\n          />\n          <br />\n          <Button fluid color=\"blue\" onClick={this.onSubmit}>\n            Submit\n          </Button>\n          {this.state.nounType !== \"\" && (\n            <Segment>\n              <h4>{this.state.nounType}</h4>\n            </Segment>\n          )}\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import rp from \"request-promise\";\nimport $ from \"cheerio\";\n\nexport function nounInfo(noun: string) {\n  const BASE_URL = \"https://www.larousse.fr/dictionnaires/francais/\";\n\n  return new Promise((resolve, reject) => {\n    rp(`${BASE_URL}${noun}`)\n      .then((html: string) => {\n        const nounType = $(\".CatgramDefinition\", html).text();\n        resolve(nounType);\n      })\n      .catch((err: Error) => {\n        reject(err);\n      });\n  });\n}\n","// tslint:disable:no-console\n// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the 'N+1' visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL!,\n      window.location.toString()\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://goo.gl/SC7cgQ\"\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker) {\n          installingWorker.onstatechange = () => {\n            if (installingWorker.state === \"installed\") {\n              if (navigator.serviceWorker.controller) {\n                // At this point, the old content will have been purged and\n                // the fresh content will have been added to the cache.\n                // It's the perfect time to display a 'New content is\n                // available; please refresh.' message in your web app.\n                console.log(\"New content is available; please refresh.\");\n              } else {\n                // At this point, everything has been precached.\n                // It's the perfect time to display a\n                // 'Content is cached for offline use.' message.\n                console.log(\"Content is cached for offline use.\");\n              }\n            }\n          };\n        }\n      };\n    })\n    .catch(error => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get(\"content-type\")!.indexOf(\"javascript\") === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}